// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCommentsByListingID = `-- name: GetCommentsByListingID :many
SELECT comment_id, listing_id, user_ip, user_id, username, comment_text, EXTRACT(EPOCH FROM date_created) FROM comments
WHERE listing_id = $1
ORDER BY date_created DESC
`

type GetCommentsByListingIDRow struct {
	CommentID   pgtype.UUID
	ListingID   string
	UserIp      string
	UserID      string
	Username    string
	CommentText string
	Extract     pgtype.Numeric
}

func (q *Queries) GetCommentsByListingID(ctx context.Context, listingID string) ([]GetCommentsByListingIDRow, error) {
	rows, err := q.db.Query(ctx, getCommentsByListingID, listingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByListingIDRow
	for rows.Next() {
		var i GetCommentsByListingIDRow
		if err := rows.Scan(
			&i.CommentID,
			&i.ListingID,
			&i.UserIp,
			&i.UserID,
			&i.Username,
			&i.CommentText,
			&i.Extract,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postComment = `-- name: PostComment :one
INSERT INTO comments (comment_id, listing_id, user_ip, user_id, username, comment_text)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING comment_id, listing_id, user_ip, user_id, username, comment_text, EXTRACT(EPOCH FROM date_created)
`

type PostCommentParams struct {
	CommentID   pgtype.UUID
	ListingID   string
	UserIp      string
	UserID      string
	Username    string
	CommentText string
}

type PostCommentRow struct {
	CommentID   pgtype.UUID
	ListingID   string
	UserIp      string
	UserID      string
	Username    string
	CommentText string
	Extract     pgtype.Numeric
}

func (q *Queries) PostComment(ctx context.Context, arg PostCommentParams) (PostCommentRow, error) {
	row := q.db.QueryRow(ctx, postComment,
		arg.CommentID,
		arg.ListingID,
		arg.UserIp,
		arg.UserID,
		arg.Username,
		arg.CommentText,
	)
	var i PostCommentRow
	err := row.Scan(
		&i.CommentID,
		&i.ListingID,
		&i.UserIp,
		&i.UserID,
		&i.Username,
		&i.CommentText,
		&i.Extract,
	)
	return i, err
}
